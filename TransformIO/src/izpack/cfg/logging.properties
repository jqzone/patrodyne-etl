# Properties file which configures the operation of the JDK
# logging facility.

# The system will look for this config file, first using
# a System property specified at startup:
#
# >java -Djava.util.logging.config.file=logging.properties
#
# If this property is not specified, then the config file is
# retrieved from its default location at:
#
# JDK_HOME/jre/lib/logging.properties

# Logging Levels
# --------------
# ALL indicates that all messages should be logged.
# CONFIG is a message level for static configuration messages.
# FINE is a message level providing tracing information.
# FINER indicates a fairly detailed tracing message.
# FINEST indicates a highly detailed tracing message.
# INFO is a message level for informational messages.
# OFF is a special level that can be used to turn off logging.
# SEVERE is a message level indicating a serious failure.
# WARNING is a message level indicating a potential problem.

# Global logging properties.
# ------------------------------------------
# The set of handlers to be loaded upon startup.
# Comma-separated list of class names.
# (? LogManager docs say no comma here, but JDK example has comma.)
handlers=java.util.logging.FileHandler, org.patrodyne.etl.transformio.jul.PrintConsoleHandler

# Default global logging level.
# Loggers and Handlers may override this level
.level=ALL

# Loggers
# ------------------------------------------
# Loggers are usually attached to packages.
# Here, the level for each package is specified.
# The global level is used by default, so levels
# specified here simply act as an override.
charva.level=INFO
charvax.level=INFO
java.level=INFO
javax.level=INFO
com.level=INFO
edu.level=INFO
net.level=INFO
sun.level=INFO
org.level=INFO
org.patrodyne.etl.transformio.level=FINEST
org.patrodyne.etl.transformio.gui.level=FINEST
org.patrodyne.etl.transformio.tui.level=FINEST
org.patrodyne.etl.transformio.cli.level=FINE

# Handlers
# -----------------------------------------

# --- ConsoleHandler ---
# Override of global logging level
org.patrodyne.etl.transformio.jul.PrintConsoleHandler.level=ALL

# Style of output (Simple, XML, ...):
# org.patrodyne.etl.transformio.jul.PrintConsoleHandler.formatter=java.util.logging.SimpleFormatter
org.patrodyne.etl.transformio.jul.PrintConsoleHandler.formatter=org.patrodyne.etl.transformio.jul.BriefFormatter
# --- ConsoleHandler ---

# --- FileHandler ---
# Override of global logging level
java.util.logging.FileHandler.level=ALL

# Style of output (Simple, XML, ...):
# java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter
java.util.logging.FileHandler.formatter=org.patrodyne.etl.transformio.jul.MediumFormatter

# Append onto any existing files (defaults to false).
java.util.logging.FileHandler.append=true

# A pattern consists of a string that includes the following special components:
#  "/" the local pathname separator
#  "%t" the system temporary directory
#  "%h" the value of the "user.home" system property
#  "%g" the generation number to distinguish rotated logs
#  "%u" a unique number to resolve conflicts
#  "%%" translates to a single percent sign "%" 
#java.util.logging.FileHandler.pattern=%h/java%u.log
java.util.logging.FileHandler.pattern=log/TransformIO-%u-%g.log

# Limiting size of output file in bytes:
java.util.logging.FileHandler.limit=50000

# Number of output files to cycle through, by appending an
# integer to the base file name:
java.util.logging.FileHandler.count=1
# --- FileHandler ---
